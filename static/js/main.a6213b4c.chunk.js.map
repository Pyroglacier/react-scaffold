{"version":3,"sources":["components/testable-button/testable-button.tsx","logo.svg","middlewares/hooks.ts","utils/logger/logger.ts","middlewares/ui/slices/ui.slice.ts","middlewares/ui/slices/initial-state.ts","utils/transformers/hof/to-transformer.hof.ts","utils/transformers/hof/to-two-way-transformer.hof.ts","utils/transformers/iso-string-to-date-time.transformer.ts","middlewares/stuff/entities/stuff.backend.entity.ts","middlewares/stuff/entities/stuff.entity.ts","middlewares/stuff/api/constants.ts","config.ts","middlewares/stuff/api/instance/instance.ts","middlewares/stuff/api/instance/interceptors.ts","middlewares/stuff/api/instance/mock.ts","middlewares/stuff/api/instance/index.ts","middlewares/stuff/api/stuff.api.ts","middlewares/stuff/slices/initial-state.ts","middlewares/stuff/slices/stuff.slice.ts","App.tsx","middlewares/stuff/hooks/use-get-stuff.hook.tsx","middlewares/stuff/thunks/get-stuff.thunk.ts","middlewares/store.ts","serviceWorker.ts","index.tsx"],"names":["TestableButton","useState","hovered","setHovered","counter","setCounter","type","onClick","prev","onMouseEnter","onMouseLeave","useAppSelector","useSelector","logger","winston","createLogger","level","transports","uiSlice","createSlice","name","initialState","loading","reducers","setError","state","action","errorMessage","payload","setLoading","uiReducer","reducer","actions","toTransformer","transformFn","transformerSpec","toClass","transformUndefined","params","undefined","value","TransformationType","CLASS_TO_PLAIN","toPlain","PLAIN_TO_CLASS","isoStringToDateTime","s","DateTime","fromISO","BackendStuffMeta","Expose","Transform","IsDefined","param","Object","assign","this","BackendStuff","Type","data","tag","Stuff","input","id","n","meta","rest","isEnabled","GET_STUFF_URL","BASE_URL","process","REACT_APP_API_URL","IS_MOCK_API","toLowerCase","instance","axios","create","baseURL","interceptors","request","use","config","response","resp","err","Promise","reject","mockInstance","getMeta","resolve","setTimeout","updatedAt","now","createdAt","getBackendStuff","backendStuff","classToPlain","mock","MockAdapter","onGet","reply","anotherStuff","getAllBackendStuff","RegExp","url","replace","realInstance","getStuff","a","get","then","res","plainToClass","fromBackend","initialStuffState","lookup","stuffSlice","putStuff","stuff","upsertStuff","warn","stuffReducer","App","dispatch","useDispatch","className","src","logo","alt","getStuffApi","catch","message","finally","JSON","stringify","combineReducers","ui","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.a6213b4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport function TestableButton() {\n    const [hovered, setHovered] = useState<boolean>(false);\n    const [counter, setCounter] = useState<number>(0);\n\n    const onClick = () => {\n        setCounter((prev) => prev + 1);\n    };\n    const onMouseEnter = () => setHovered(true);\n    const onMouseLeave = () => setHovered(false);\n\n    return (\n        <button\n            type=\"button\"\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {hovered ? 'Hovering' : `Click me! Clicked ${counter} time(s)!`}\n        </button>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import winston from 'winston';\nimport BrowserConsole from 'winston-transport-browserconsole';\n\nconst logger = winston.createLogger({\n    level: 'debug',\n    transports: [],\n});\n\nswitch (process.env.NODE_ENV) {\n    case 'test':\n        // - Write all logs with importance level of `error` or less to `error.log`\n        const errorFile = new winston.transports.File({\n            filename: 'logs/error.log',\n            level: 'error',\n        });\n        // - Write all logs with importance level of `info` or less to `combined.log`\n        const infoFile = new winston.transports.File({\n            filename: 'logs/combined.log',\n        });\n\n        logger.add(errorFile).add(infoFile);\n        break;\n    case 'development':\n        const consoleLog = new BrowserConsole({\n            format: winston.format.simple(),\n        });\n        logger.add(consoleLog);\n        break;\n    case 'production':\n    default:\n        break;\n}\n\nexport { logger };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { initialUiState } from './initial-state';\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState: initialUiState,\n    reducers: {\n        setError: (state, action: PayloadAction<string>) => {\n            const errorMessage = action.payload;\n            state.errorMessage = errorMessage;\n        },\n        setLoading: (state, action: PayloadAction<boolean>) => {\n            const loading = action.payload;\n            state.loading = loading;\n        },\n    },\n});\n\nexport const uiReducer = uiSlice.reducer;\nexport const { setError, setLoading } = uiSlice.actions;\n","export const initialUiState: {\n    loading: boolean;\n    errorMessage?: string;\n} = {\n    loading: false,\n};\n\nexport type UiState = typeof initialUiState;\n","import { TransformFnParams } from 'class-transformer';\n\nimport { toTwoWayTransformer } from './to-two-way-transformer.hof';\n\n// This is a short hand for transforming function of one-way (json to class) only\nexport function toTransformer<A, B>(transformFn: (value: A) => B) {\n    return toTwoWayTransformer({\n        toClass: transformFn,\n        transformUndefined: false,\n    });\n}\n","import { TransformFnParams, TransformationType } from 'class-transformer';\n\n/**\n * If intended to transform undefined values, note that @Expose is required to force transformer to run\n * ie. Without @Expose, @Transform(transformFn) would not be called at all in case of \"{}\" => Class\n * Missing properties would always be `undefined`\n * class-transformer 0.4.0, Jun 07, 2021\n */\ntype TransformerSpec<Property, Value> = {\n    toClass?: (value: Value) => Property;\n    toPlain?: (property: Property) => Value;\n    transformUndefined?: boolean; // undefined is passed to transform functions if true\n};\n\nexport function toTwoWayTransformer<Property, Value>(\n    transformerSpec: TransformerSpec<Property, Value>\n) {\n    return function (params: TransformFnParams): Property | Value | undefined {\n        if (!transformerSpec.transformUndefined && params.value === undefined) {\n            return undefined;\n        }\n        switch (params.type) {\n            case TransformationType.CLASS_TO_PLAIN:\n                return transformerSpec.toPlain?.(params.value) ?? params.value;\n            case TransformationType.PLAIN_TO_CLASS:\n                return transformerSpec.toClass?.(params.value) ?? params.value;\n            default:\n                return params.value;\n        }\n    };\n}\n","import { DateTime } from 'luxon';\n\nimport { toTransformer } from './hof';\n\nexport function isoStringToDateTime() {\n    return toTransformer((s: string) => DateTime.fromISO(s));\n}\n","import { Expose, Transform, Type } from 'class-transformer';\nimport { IsDefined } from 'class-validator';\nimport { DateTime } from 'luxon';\n\nimport { isoStringToDateTime } from '../../../utils';\n\nexport class BackendStuffMeta {\n    constructor(param: Partial<BackendStuffMeta> = {}) {\n        Object.assign(this, param);\n    }\n\n    @Expose({ name: 'updated_at' })\n    @Transform(isoStringToDateTime())\n    updatedAt?: DateTime;\n\n    @Expose({ name: 'created_at' })\n    @Transform(isoStringToDateTime())\n    createdAt?: DateTime;\n\n    @Expose({ name: 'is_enabled' })\n    isEnabled?: boolean;\n\n    // IsDefined is for checking when posting, but programmatically we should be catious of its absence\n    @IsDefined()\n    id?: string;\n}\n\nexport class BackendStuff {\n    constructor(param: Partial<BackendStuff> = {}) {\n        Object.assign(this, param);\n    }\n\n    @Type(() => BackendStuffMeta)\n    meta?: BackendStuffMeta;\n\n    data?: string;\n\n    tag?: string;\n}\n","import { BackendStuff } from './stuff.backend.entity';\n\nexport class Stuff {\n    constructor(input: Partial<Stuff> = {}) {\n        Object.assign(this, input);\n    }\n\n    id!: string;\n\n    data!: string;\n\n    tag?: string;\n\n    static fromBackend(n: BackendStuff) {\n        const { meta = {}, data, ...rest } = n;\n        const { id, isEnabled } = meta;\n        if (!id || !isEnabled || !data) {\n            return null;\n        }\n        return new Stuff({ id, data, ...rest });\n    }\n}\n","export const GET_STUFF_URL = '/stuffs';\n","export const BASE_URL = process.env.REACT_APP_API_URL;\nexport const IS_TEST = process.env.NODE_ENV === 'test';\nexport const IS_MOCK_API =\n    process.env.REACT_APP_MOCK_API?.toLowerCase() === 'true';\n","import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport { BASE_URL, IS_TEST } from '../../../../config';\nimport { GET_STUFF_URL } from '../constants';\n\nimport { onError, onRequest, onResponse } from './interceptors';\nimport { getAllBackendStuff, getBackendStuff } from './mock';\n\nconst instance = axios.create({ baseURL: BASE_URL });\n\ninstance.interceptors.request.use(onRequest);\ninstance.interceptors.response.use(onResponse, onError);\nexport { instance };\n","import {\n    AxiosError,\n    AxiosRequestTransformer,\n    AxiosResponseTransformer,\n} from 'axios';\n\nexport const onRequest: AxiosRequestTransformer = (config) => config;\nexport const onResponse: AxiosResponseTransformer = (resp) => resp;\nexport const onError = (err: AxiosError) => Promise.reject(err);\n","import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { classToPlain } from 'class-transformer';\nimport { DateTime } from 'luxon';\n\nimport { BASE_URL } from '../../../../config';\nimport { BackendStuff, BackendStuffMeta } from '../../entities';\nimport { GET_STUFF_URL } from '../constants';\n\nconst mockInstance = axios.create({ baseURL: BASE_URL });\n\n// eslint-disable-next-line no-promise-executor-return\nconst timeout = new Promise((resolve) => setTimeout(resolve, 100));\n\nconst getMeta = (id?: string) =>\n    new BackendStuffMeta({\n        id,\n        isEnabled: true,\n        updatedAt: DateTime.now(),\n        createdAt: DateTime.now(),\n    });\n\nexport const getAllBackendStuff = () => {\n    const backendStuff = new BackendStuff({\n        meta: getMeta('1'),\n        data: 'data',\n    });\n    const anotherStuff = new BackendStuff({\n        meta: getMeta('2'),\n        data: 'another',\n    });\n    return classToPlain([backendStuff, anotherStuff]);\n};\n\nexport function getBackendStuff(id: string) {\n    const backendStuff = new BackendStuff({\n        meta: getMeta(id),\n        data: 'data',\n    });\n    return classToPlain(backendStuff);\n}\n\nconst mock = new MockAdapter(mockInstance);\n\nmock.onGet(GET_STUFF_URL).reply(200, getAllBackendStuff());\n\nmock.onGet(new RegExp(`${GET_STUFF_URL}/*`)).reply((config) => {\n    const match = config.url?.replace(`${GET_STUFF_URL}/`, '') || '';\n    return [200, getBackendStuff(match)];\n});\n\nexport { mockInstance };\n","import { IS_MOCK_API, IS_TEST } from '../../../../config';\n\nimport { instance as realInstance } from './instance';\nimport { mockInstance } from './mock';\n\nconst instance = IS_TEST || IS_MOCK_API ? mockInstance : realInstance;\nexport { instance };\n","import { AxiosResponse } from 'axios';\nimport { plainToClass } from 'class-transformer';\n\nimport { BackendStuff, Stuff } from '../entities';\n\nimport { GET_STUFF_URL } from './constants';\nimport { instance } from './instance';\n\n// Returns mocked at axios instance (./instance) if IS_TEST / IS_MOCK = true.\n\nexport async function getAllStuff(): Promise<BackendStuff[]> {\n    const nodes = await instance.get(GET_STUFF_URL).then((res) => res.data);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return nodes.map((n: any) => {\n        const backendStuff = plainToClass(BackendStuff, n) as BackendStuff;\n        return Stuff.fromBackend(backendStuff);\n    });\n}\n\nexport async function getStuff(id: string) {\n    const n = await instance\n        .get(`${GET_STUFF_URL}/${id}`)\n        .then((res: AxiosResponse) => res.data);\n    const backendStuff = plainToClass(BackendStuff, n) as BackendStuff;\n    return Stuff.fromBackend(backendStuff);\n}\n","import { Stuff } from '../entities';\n\nconst initialStuffLookup: {\n    [id: string]: Stuff;\n} = {};\n\nexport const initialStuffState = {\n    lookup: initialStuffLookup,\n};\nexport type StuffState = typeof initialStuffState;\n","import { CaseReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { logger } from '../../../utils/logger/logger';\nimport { Stuff } from '../entities';\n\nimport { StuffState, initialStuffState } from './initial-state';\n\ntype PutStuffActionPayload = Stuff;\n\nconst putStuffExample: CaseReducer<\n    StuffState,\n    PayloadAction<PutStuffActionPayload>\n> = (state, action) => {\n    const stuff: Stuff = action.payload;\n    state.lookup[stuff.id] = stuff;\n};\n\nconst stuffSlice = createSlice({\n    name: 'stuff',\n    initialState: initialStuffState,\n    reducers: {\n        putStuff: putStuffExample,\n        upsertStuff: (state, action: PayloadAction<Partial<Stuff>>) => {\n            const stuff = action.payload;\n            const id = stuff?.id;\n            if (!id) {\n                logger.warn('There is no Stuff associated with this id.');\n                return;\n            }\n            state.lookup[id] = { ...state.lookup[id], ...stuff };\n        },\n    },\n});\n\nexport const stuffReducer = stuffSlice.reducer;\nexport const { putStuff, upsertStuff } = stuffSlice.actions;\n","import React from 'react';\n\nimport './App.css';\nimport { TestableButton } from './components/testable-button';\nimport logo from './logo.svg';\nimport { useAppDispatch } from './middlewares/hooks';\nimport { useGetStuff } from './middlewares/stuff/hooks/use-get-stuff.hook';\nimport { getStuff } from './middlewares/stuff/thunks/get-stuff.thunk';\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    const stuff = useGetStuff('id');\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <button\n                    type=\"button\"\n                    onClick={() => {\n                        dispatch(getStuff('id'));\n                    }}\n                >\n                    get stuff\n                </button>\n                <span>{JSON.stringify(stuff)}</span>\n                <span>learn</span>\n                <TestableButton />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { useAppSelector } from '../../hooks';\n\nexport function useGetStuff(id: string) {\n    return useAppSelector((state) => state?.stuff?.lookup?.[id] || null);\n}\n","import { logger } from '../../../utils/logger';\nimport { AppThunkDispatch } from '../../thunk.type';\nimport { setError, setLoading } from '../../ui/slices';\nimport { getStuff as getStuffApi } from '../api/stuff.api';\nimport { putStuff } from '../slices/stuff.slice';\n\nexport function getStuff(id: string) {\n    return async function (dispatch: AppThunkDispatch) {\n        dispatch(setLoading(true));\n        await getStuffApi(id)\n            .then((stuff) => {\n                if (!stuff) {\n                    dispatch(\n                        setError(`API Error - Cannot get Stuff with id: ${id}`)\n                    );\n                    return;\n                }\n                dispatch(putStuff(stuff));\n            })\n            .catch((err) => {\n                logger.warn(err);\n                dispatch(setError(err.message));\n            })\n            .finally(() => {\n                dispatch(setLoading(false));\n            });\n    };\n}\n","import {\n    Action,\n    ThunkAction,\n    combineReducers,\n    configureStore,\n} from '@reduxjs/toolkit';\n\nimport { stuffReducer } from './stuff/slices/stuff.slice';\nimport { uiReducer } from './ui/slices';\n\nexport const reducer = combineReducers({\n    stuff: stuffReducer,\n    ui: uiReducer,\n});\nexport const store = configureStore({\n    reducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'reflect-metadata';\n\nimport App from './App';\nimport './index.css';\nimport { store } from './middlewares/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}